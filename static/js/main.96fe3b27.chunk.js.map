{"version":3,"sources":["redux/actions.js","components/ChannelList/index.js","components/ChannelProgram/index.js","App.js","reportWebVitals.js","constants.js","redux/actions_creators.js","redux/sagas/index.js","redux/store.js","index.js"],"names":["GET_CHANNELS_SUCCESS","GET_PROGRAMS_SUCCESS","GET_PROGRAMS_REQUESTED","GET_CHANNELS_REQUESTED","ChannelList","useSelector","store","channels","currentXvid","dispatch","useDispatch","useEffect","type","handleClick","event","target","dataset","xvid","payload","className","map","elem","onClick","title","chid","ChannelProgram","programs","programsGroup","date","duration","a","Date","getTime","b","mill","Number","length","start","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","API_CHANNELS","API_PROGRAMS","getPrograms","getProgramsWorker","getChannelsWorker","rootSaga","fetchPrograms","id","fetch","res","json","fetchChannels","actions","call","fetchRes","put","resChan","takeEvery","initialState","sagaMiddleware","createSagaMiddleware","createStore","state","action","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96fe3b27.chunk.js","sourcesContent":["export const GET_CHANNELS_SUCCESS = \"GET_CHANNELS\";\r\nexport const GET_PROGRAMS_SUCCESS = \"GET_PROGRAMS\";\r\nexport const GET_PROGRAMS_REQUESTED = \"GET_PROGRAMS_REQUESTED\";\r\nexport const GET_CHANNELS_REQUESTED = \"GET_CHANNELS_REQUESTED\";","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { GET_CHANNELS_REQUESTED, GET_PROGRAMS_REQUESTED } from \"../../redux/actions\";\r\n\r\nfunction ChannelList(){\r\n    const [channels, currentXvid] = useSelector(store => [\r\n        store.channels,\r\n        store.currentXvid\r\n    ]);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch({type: GET_CHANNELS_REQUESTED});\r\n    }, []);\r\n\r\n    const handleClick = (event) => {\r\n        if(event.target.dataset.xvid !== currentXvid){\r\n            dispatch({type: GET_PROGRAMS_REQUESTED, payload: { \r\n                xvid:  event.target.dataset.xvid} \r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"col-6\">\r\n            <div className=\"block__title\">Выберите один из каналов</div>\r\n            <ul className=\"block_list\">\r\n                {channels.map((elem) => \r\n                    <li className={`block_list__item channels ${currentXvid === elem.xvid ? \"active\" : \"\"}`} onClick={handleClick} data-xvid={elem.xvid} key={elem.chid}>{elem.title}</li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelList;\r\n","import { useSelector } from \"react-redux\";\r\n\r\nfunction ChannelProgram(){\r\n    const programs = useSelector(store => store.programs);\r\n\r\n    function programsGroup(date, duration){\r\n        let a = new Date().getTime();\r\n        let b = new Date(date).getTime();\r\n        let mill = Number(duration)*1000;\r\n        let style = \"\";\r\n        if (a > b && a < b + mill){\r\n            style = \"current\";\r\n        }else if(a > b && a > b + mill){\r\n            style = \"past\";\r\n        }else{\r\n            style = \"future\";\r\n        }\r\n        return style;\r\n    }\r\n\r\n    return(\r\n        <div className=\"col-6\">\r\n            <div className=\"block__title\">Список передач</div>\r\n                {(programs.length) \r\n                    ? \r\n                    <ul className=\"block_list programs\">\r\n                        {programs.map((elem) => \r\n                            <li className={\"block_list__li \" + programsGroup(elem.start, elem.duration)} key={elem.start}><p className=\"block_list__date\">{elem.start}</p><p className=\"block_list__title\">{elem.title}</p></li>\r\n                        )}\r\n                    </ul>\r\n                    : \"Вы не выбрали канал\"\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelProgram;","import ChannelList from './components/ChannelList';\nimport ChannelProgram from './components/ChannelProgram';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <ChannelList />\n        <ChannelProgram />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const API_CHANNELS = 'https://epg.domru.ru/';\r\nexport const API_PROGRAMS = 'https://epg.domru.ru/program/';","import { GET_PROGRAMS_SUCCESS ,GET_CHANNELS_SUCCESS } from \"./actions\"\r\n\r\nexport function getChannels(channels){\r\n    return{\r\n        type: GET_CHANNELS_SUCCESS,\r\n        payload: channels\r\n    }\r\n}\r\n\r\nexport function getPrograms(programs, xvid){\r\n    return{\r\n        type: GET_PROGRAMS_SUCCESS,\r\n        payload: {\r\n            programs,\r\n            xvid \r\n        }\r\n    }\r\n}","import { call, put, takeEvery } from 'redux-saga/effects';\r\nimport { API_CHANNELS, API_PROGRAMS } from '../../constants';\r\nimport { GET_CHANNELS_REQUESTED, GET_PROGRAMS_REQUESTED } from '../actions';\r\nimport { getChannels, getPrograms } from '../actions_creators';\r\n\r\nasync function fetchPrograms(id){\r\n    let res = await fetch(`${API_PROGRAMS}list?domain=kazan&date_from=2021-08-18&date_to=2021-08-25&xvid=${id}`)\r\n    return await res.json();\r\n}   \r\nasync function fetchChannels(){\r\n    let res = await fetch(`${API_CHANNELS}channel/list?domain=kazan`);\r\n    return await res.json();\r\n}\r\n\r\nfunction* getProgramsWorker(actions){\r\n    const { xvid } = actions.payload;\r\n    const fetchRes = yield call(fetchPrograms, xvid);\r\n    yield put(getPrograms(fetchRes[xvid], xvid));\r\n}\r\n\r\nfunction* getChannelsWorker(){\r\n    const resChan = yield call(fetchChannels);\r\n    yield put(getChannels(resChan));\r\n}\r\n\r\nfunction* rootSaga(){\r\n    yield takeEvery(GET_PROGRAMS_REQUESTED, getProgramsWorker);\r\n    yield takeEvery(GET_CHANNELS_REQUESTED, getChannelsWorker);\r\n}\r\n\r\nexport default rootSaga;","import { createStore, applyMiddleware  } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { GET_CHANNELS_SUCCESS, GET_PROGRAMS_SUCCESS } from './actions';\r\nimport rootSaga from './sagas';\r\n\r\nconst initialState = {\r\n    channels: [],\r\n    programs: [],\r\n    currentXvid: null\r\n}\r\n\r\nfunction telereduce(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_CHANNELS_SUCCESS:\r\n            return {...state, channels: action.payload};\r\n        case GET_PROGRAMS_SUCCESS: \r\n            return {...state, programs: action.payload.programs, currentXvid: action.payload.xvid};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(telereduce, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode> \n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}