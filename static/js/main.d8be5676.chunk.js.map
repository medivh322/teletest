{"version":3,"sources":["redux/actions.js","components/ChannelList/index.js","constants.js","redux/actions_creators.js","components/ChannelProgram/index.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["GET_CHANNELS","GET_PROGRAMS","ChannelList","useSelector","store","channels","currentXvid","dispatch","useDispatch","useEffect","fetch","then","response","json","data","type","payload","getChannels","handleClick","event","target","dataset","xvid","programs","className","map","elem","onClick","title","chid","ChannelProgram","programsGroup","date","duration","a","Date","getTime","b","mill","Number","length","start","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","createStore","state","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8be5676.chunk.js","sourcesContent":["export const GET_CHANNELS = \"GET_CHANNELS\";\r\nexport const GET_PROGRAMS = \"GET_PROGRAMS\";","import { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { API_CHANNELS, API_PROGRAMS } from \"../../constants\";\r\nimport { getChannels, getPrograms } from \"../../redux/actions_creators\";\r\n\r\nfunction ChannelList(){\r\n    const [channels, currentXvid] = useSelector(store => [\r\n        store.channels,\r\n        store.currentXvid\r\n    ]);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        fetch(`${API_CHANNELS}channel/list?domain=kazan`)\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            dispatch(getChannels(data));\r\n          })\r\n    }, [])\r\n\r\n    const handleClick = (event) => {\r\n        fetch(`${API_PROGRAMS}list?domain=kazan&date_from=2021-08-18&date_to=2021-08-25&xvid=${event.target.dataset.xvid}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            dispatch(getPrograms(data[event.target.dataset.xvid], event.target.dataset.xvid));\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"col-6\">\r\n            <div className=\"block__title\">Выберите один из каналов</div>\r\n            <ul className=\"block_list\">\r\n                {channels.map((elem) => \r\n                    <li className={`block_list__item channels ${currentXvid == elem.xvid ? \"active\" : \"\"}`} onClick={handleClick} data-xvid={elem.xvid} key={elem.chid}>{elem.title}</li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelList;\r\n","export const API_CHANNELS = 'https://epg.domru.ru/';\r\nexport const API_PROGRAMS = 'https://epg.domru.ru/program/';","import { GET_CHANNELS, GET_PROGRAMS } from \"./actions\"\r\n\r\nexport function getChannels(channels){\r\n    return{\r\n        type: GET_CHANNELS,\r\n        payload: channels\r\n    }\r\n}\r\n\r\nexport function getPrograms(programs, xvid){\r\n    return{\r\n        type: GET_PROGRAMS,\r\n        payload: {\r\n            programs,\r\n            xvid \r\n        }\r\n    }\r\n}\r\n\r\n// export function setPrograms(xvid){\r\n//     return{\r\n//         type: GET_PROGRAMS,\r\n//         payload: xvid\r\n//     }\r\n// }","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { API_PROGRAMS } from \"../../constants\";\r\nimport { getPrograms } from \"../../redux/actions_creators\";\r\n\r\nfunction ChannelProgram(){\r\n    const programs = useSelector(store => store.programs);\r\n    const dispatch = useDispatch();\r\n\r\n    function programsGroup(date, duration){\r\n        let a = new Date().getTime();\r\n        let b = new Date(date).getTime();\r\n        let mill = Number(duration)*1000;\r\n        let style = \"\";\r\n        if (a > b && a < b + mill){\r\n            style = \"current\";\r\n        }else if(a > b && a > b + mill){\r\n            style = \"past\";\r\n        }else{\r\n            style = \"future\";\r\n        }\r\n        return style;\r\n    }\r\n\r\n    return(\r\n        <div className=\"col-6\">\r\n            <div className=\"block__title\">Список передач</div>\r\n                {(programs.length) \r\n                    ? \r\n                    <ul className=\"block_list programs\">\r\n                        {programs.map((elem) => \r\n                            <li className={\"block_list__li \" + programsGroup(elem.start, elem.duration)} key={elem.start}><p className=\"block_list__date\">{elem.start}</p><p className=\"block_list__title\">{elem.title}</p></li>\r\n                        )}\r\n                    </ul>\r\n                    : \"Вы не выбрали канал\"\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelProgram;","import { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { API_CHANNELS } from \"./constants\";\nimport ChannelList from './components/ChannelList';\nimport ChannelProgram from './components/ChannelProgram';\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <ChannelList />\n        <ChannelProgram />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore } from 'redux';\r\nimport { GET_CHANNELS, GET_PROGRAMS, SET_PROGRAMS } from './actions';\r\n\r\nconst initialState = {\r\n    channels: [],\r\n    programs: [],\r\n    currentXvid: null\r\n}\r\n\r\nfunction telereduce(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_CHANNELS:\r\n            return {...state, channels: action.payload};\r\n        case GET_PROGRAMS: \r\n            return {...state, programs: action.payload.programs, currentXvid: action.payload.xvid};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst store = createStore(telereduce);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode> \n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}